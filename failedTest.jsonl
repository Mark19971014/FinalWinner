{"industryname": "Animal Feed Production", "functionname": "Animal Feed Production_feed_cost_calculator", "tool": {"type": "function", "function": {"name": "feed_cost_calculator", "description": "Calculates the total cost of producing a specific quantity of animal feed based on ingredient prices and quantities. This tool helps feed producers estimate the cost of production and make informed decisions about ingredient sourcing and pricing strategies.", "parameters": {"type": "object", "properties": {"ingredient_prices": {"type": "object", "additionalProperties": {"type": "number"}, "description": "Prices of ingredients per unit weight."}, "ingredient_quantities": {"type": "object", "additionalProperties": {"type": "number"}, "description": "Quantities of ingredients required."}}, "required": ["ingredient_prices", "ingredient_quantities"]}}}, "query": "Calculate the cost of producing feed with corn at $0.5/kg, soy at $0.8/kg, and wheat at $0.6/kg, using 100 kg of each.", "mock_function": "```python\ndef feed_cost_calculator(ingredient_prices, ingredient_quantities):\n    return f'Total feed cost: $500 for the specified quantities and prices.'\n```", "error": "feed_cost_calculator() missing 2 required positional arguments: 'ingredient_prices' and 'ingredient_quantities'"}
{"industryname": "Computer Design", "functionname": "Computer Design_3d_model_optimizer", "tool": {"type": "function", "function": {"name": "3d_model_optimizer", "description": "Optimizes 3D models for better performance in rendering and real-time applications. The tool reduces the polygon count, improves texture mapping, and enhances the overall efficiency of 3D models. It is useful for designers who need to ensure their models run smoothly in various applications without compromising visual quality.", "parameters": {"type": "object", "properties": {"model_file": {"type": "string", "description": "The file path of the 3D model to be optimized."}, "target_poly_count": {"type": "integer", "description": "Desired polygon count after optimization."}, "texture_quality": {"type": "string", "enum": ["low", "medium", "high"], "description": "Desired texture quality after optimization."}}, "required": ["model_file", "target_poly_count", "texture_quality"]}}}, "query": "Optimize the 3D model at path 'models/car.obj' to 5000 polygons with medium texture quality.", "mock_function": "```python\ndef 3d_model_optimizer(model_file, target_poly_count, texture_quality):\n    return f'3D model {model_file} optimized to {target_poly_count} polygons with {texture_quality} texture quality.'\n```", "error": "invalid decimal literal (<string>, line 1)"}
{"industryname": "Entertainment Media Production", "functionname": "Entertainment Media Production_casting_suggestions", "tool": {"type": "function", "function": {"name": "casting_suggestions", "description": "Provides casting suggestions based on character descriptions and actor preferences. This tool helps casting directors find suitable actors for specific roles by matching character traits with actor profiles. It is useful for film and theater productions looking to cast the perfect talent for their projects.", "parameters": {"type": "object", "properties": {"character_description": {"type": "string", "description": "Description of the character (e.g., age, personality, appearance)."}, "actor_preferences": {"type": "array", "items": {"type": "string"}, "description": "Preferred actors or traits (e.g., known actors, specific skills)."}}, "required": ["character_description", "actor_preferences"]}}}, "query": "Can you suggest actors for a character who is a 30-year-old adventurous woman with a preference for actors skilled in martial arts?", "mock_function": "```python\ndef casting_suggestions(character_description, actor_preferences):\n    return f'Casting suggestions for character {character_description}: Actor A, known for {actor_preferences[0]}; Actor B, skilled in {actor_preferences[1]}.'\n```", "error": "list index out of range"}
{"industryname": "Gaming Software Development", "functionname": "Gaming Software Development_game_character_creator", "tool": {"type": "function", "function": {"name": "game_character_creator", "description": "Creates a game character based on specified attributes such as race, class, and abilities. This tool helps game developers quickly generate characters with unique traits for their games. For example, a developer can create an elf archer with high agility and stealth abilities, which can be used as a player character or NPC in a fantasy game.", "parameters": {"type": "object", "properties": {"race": {"type": "string", "description": "The race of the character (e.g., Elf, Orc, Human)."}, "class": {"type": "string", "description": "The class of the character (e.g., Warrior, Mage, Archer)."}, "abilities": {"type": "array", "items": {"type": "string"}, "description": "List of abilities (e.g., Stealth, Fireball, Healing)."}}, "required": ["race", "class", "abilities"]}}}, "query": "Create a character with race Elf, class Archer, and abilities Stealth and Agility.", "mock_function": "```python\ndef game_character_creator(race, class_, abilities):\n    return f'Character created: {race} {class_} with abilities: {', '.join(abilities)}.'\n```", "error": "game_character_creator() got an unexpected keyword argument 'class'. Did you mean 'class_'?"}
